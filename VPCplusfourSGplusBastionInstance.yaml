# This Is IaC for HandyPro Project 
# Initially, VPC were created in the range of 172.30.0.0/16
# DC were hosted in the Virginia Region(US)
# The below is the VPC 
############################################################ 
##############Create VPC####################################
Resources:
 PDQPickupVPC:
  Type: AWS::EC2::VPC
  Properties:
   CidrBlock: 172.30.0.0/16 # Modify when need
   EnableDnsHostnames: true
   InstanceTenancy: default
   Tags:
    - Key: Name
      Value: pdqpickup.com # Modify when need
#    - Key: StackName
#     Value: !Ref AWS::StackId	
#    - Key: Project
#      Value: HandyPro	
###########################################################
# Create 2 Public Subnets and Private Subnets 
# Mind the AvailabilityZone(2) while creating 
############ Create Public Subnet 1 #######################
########## AZ us-east-1a ##################################
 PublicSubnet1PDQ:
  Type: AWS::EC2::Subnet
  Properties:
   VpcId: !Ref PDQPickupVPC
   AvailabilityZone: us-east-1a  # Modify when need
   CidrBlock: 172.30.10.0/26     # Modify when need
   Tags:
    - Key: Name
      Value: Public Subnet-pdqpickup.com
#    - Key: Project
#      Value: HandyPro
   MapPublicIpOnLaunch: true
###########################################################
############ Create Public Subnet 2 #######################
############AZ us-east-1b #################################
##########
 PublicSubnet2PDQ:
  Type: AWS::EC2::Subnet
  Properties:
   VpcId: !Ref PDQPickupVPC
   AvailabilityZone: us-east-1b  # Modify when need
   CidrBlock: 172.30.100.0/26     # Modify when need
   Tags:
    - Key: Name
      Value: Public Subnet-pdqpickup.com(HA)
#    - Key: Project
#      Value: HandyPro
   MapPublicIpOnLaunch: true
###########################################################
###############Private Subnet 1 ###########################
########## AZ us-east-1a ##################################
 PrivateSubnet1PDQ:
  Type: AWS::EC2::Subnet
  Properties:
   VpcId: !Ref PDQPickupVPC
   AvailabilityZone: us-east-1a # Modify when need
   CidrBlock: 172.30.20.0/26    # modify when need
   Tags:
    - Key: Name
      Value: Private Subnet-pdqpickup.com
#    - Key: Project
#      Value: HandyPro
   MapPublicIpOnLaunch: false
###########################################################
###############Private Subnet 2 ###########################
########## AZ us-east-1b ##################################
 PrivateSubnet2PDQ:
  Type: AWS::EC2::Subnet
  Properties:
   VpcId: !Ref PDQPickupVPC
   AvailabilityZone: us-east-1b # Modify when need
   CidrBlock: 172.30.200.0/26    # Modify when need
   Tags:
    - Key: Name
      Value: Private Subnet-pdqpickup.com(HA)
#    - Key: Project
#      Value: HandyPro
   MapPublicIpOnLaunch: false
#############################################################
############### Create InternetGateway ######################
############### Attach Internet G/W to VPC ##################
 InternetGatewayPDQ:
  Type: AWS::EC2::InternetGateway
  Properties:
   Tags:
    - Key: Name
      Value: IG-pdqpickup.com  # Modify when need
#    - Key: Project
#      Value: HandyPro
####### Attach Internet G/W to VPC #########################
 AttachIGtoVPCPDQ:
  Type: AWS::EC2::VPCGatewayAttachment
  Properties:
   VpcId: !Ref PDQPickupVPC
   InternetGatewayId: !Ref InternetGatewayPDQ
############################################################
############################################################
###Create Route Table (one Public RT & one Private RT)######
###Associate the Subnets & attach the relevant Route rule###
################Public Route Table #########################
##### Attach to Internet G/W################################
############Associate the public subnets####################
 PublicRouteTable:
  Type: AWS::EC2::RouteTable
  Properties:
   VpcId: !Ref PDQPickupVPC
   Tags:
     - Key: Name
       Value: PublicRT-pdqpickup.com
#     - Key: StackName
#       Value: !Ref AWS::StackId	
#    - Key: Project
#       Value: HandyPro
 PublicRouteRule: 
  Type: AWS::EC2::Route
  Properties:
   RouteTableId: !Ref PublicRouteTable
   DestinationCidrBlock: 0.0.0.0/0
   GatewayId: !Ref InternetGatewayPDQ
 PublicRoutetableSubnetAssociation1:
  Type: AWS::EC2::SubnetRouteTableAssociation
  Properties:
   RouteTableId: !Ref PublicRouteTable
   SubnetId: !Ref PublicSubnet1PDQ
 PublicRoutetableSubnetAssociation2:
  Type: AWS::EC2::SubnetRouteTableAssociation
  Properties:
   RouteTableId: !Ref PublicRouteTable
   SubnetId: !Ref PublicSubnet2PDQ
############################################################
############################################################
######### Create NAT Gateway ###############################
#### NAT must be created in Public Subnet ##################
##### Random EIP will be created and attached ##############
 NatGateway:
  Type: "AWS::EC2::NatGateway"
  DependsOn: NatPublicIP
  Properties: 
   AllocationId: !GetAtt NatPublicIP.AllocationId
   SubnetId: !Ref PublicSubnet1PDQ
   Tags:
    - Key: Name
      Value : NAT-pdqpickup.com
 NatPublicIP:
  Type: "AWS::EC2::EIP"
  DependsOn: PDQPickupVPC
  Properties:
   Domain: vpc
############################################################
########### Private Route Table ############################
#### Associate private subnets&Attach NAT G/W in Route #####
 PrivateRouteTable:
  Type: AWS::EC2::RouteTable
  Properties:
   VpcId: !Ref PDQPickupVPC
   Tags:
    - Key: Name
      Value: PrivateRT-pdqpickup.com
#    - Key: Project
#      Value: HandyPro
 PrivateRouteRule: 
  Type: AWS::EC2::Route
  Properties:
   RouteTableId: !Ref PrivateRouteTable
   DestinationCidrBlock: 0.0.0.0/0
   NatGatewayId: !Ref NatGateway
 PrivateRoutetableSubnetAssociation1:
  Type: AWS::EC2::SubnetRouteTableAssociation
  Properties:
   RouteTableId: !Ref PrivateRouteTable
   SubnetId: !Ref PrivateSubnet1PDQ
 PrivateRoutetableSubnetAssociation2:
  Type: AWS::EC2::SubnetRouteTableAssociation
  Properties:
   RouteTableId: !Ref PrivateRouteTable
   SubnetId: !Ref PrivateSubnet2PDQ
###############################################################
###############################################################
################     Security Groups   ########################
########Create 4 Security Groups ##############################
###############################################################
############ Bastion Security Group ###########################
###############################################################
 SecurityGroupone:
  Type: AWS::EC2::SecurityGroup
  Properties:
   GroupName: Bastion
   GroupDescription: Enable SSH access via 22 & 7222
   SecurityGroupIngress:
    - IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 117.240.189.202/32
    - IpProtocol: tcp
      FromPort: 7222
      ToPort: 7222
      CidrIp: 117.240.189.202/32
    - IpProtocol: tcp
      FromPort: 7222
      ToPort: 7222
      CidrIp: 117.240.189.203/32
    - IpProtocol: tcp
      FromPort: 7222
      ToPort: 7222
      CidrIp: 117.240.189.204/32
    - IpProtocol: tcp
      FromPort: 7222
      ToPort: 7222
      CidrIp: 117.240.189.205/32
    - IpProtocol: tcp
      FromPort: 7222
      ToPort: 7222
      CidrIp: 117.240.189.206/32
   Tags: 
    - Key: Name
      Value: Bastion-SG
   VpcId: !Ref PDQPickupVPC
##############################################################
############ Load Balancer Security Group ####################
##############################################################
 SecurityGrouptwo:
  Type: AWS::EC2::SecurityGroup
  Properties:
   GroupName: LoadBalancer
   GroupDescription: Enable HTTP & HTTPS to all
   SecurityGroupIngress:
    - IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
    - IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
   Tags: 
    - Key: Name
      Value: LoadBalancer-SG
   VpcId: !Ref PDQPickupVPC
#############################################################
############## Application Security Group ###################
#############################################################
 SecurityGroupthree:
  Type: AWS::EC2::SecurityGroup
  Properties:
   GroupName: Application
   GroupDescription: Enable SSH, HTTP & HTTPS to all
   SecurityGroupIngress:
    - IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref SecurityGroupone
    - IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref SecurityGrouptwo
    - IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref SecurityGrouptwo
   Tags: 
    - Key: Name
      Value: Application-SG
   VpcId: !Ref PDQPickupVPC
############################################################
##############DataBase Security Group ######################
############################################################
 SecurityGroupfour:
  Type: AWS::EC2::SecurityGroup
  Properties:
   GroupName: Database
   GroupDescription: Enable SSH & DB to all
   SecurityGroupIngress:
    - IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref SecurityGroupone
    - IpProtocol: tcp
      FromPort: 27017
      ToPort: 27017
      SourceSecurityGroupId: !Ref SecurityGroupthree
   Tags: 
    - Key: Name
      Value: DataBase-SG
   VpcId: !Ref PDQPickupVPC
############################################################
#################NetworkACL Rules###########################
######2 NACL-  1 Public Subnet & 1 Pprivate Subnet##########
############################################################
 PublicNetworkACL:
  Type: AWS::EC2::NetworkAcl
  Properties:
   VpcId: !Ref PDQPickupVPC
   Tags:
    - Key: Name
      Value: HandyProNetworkACL
    - Key: Project
      Value: HandyPro
 INBoundNetworkAClallowHTTP:
  Type: AWS::EC2::NetworkAclEntry
  Properties:
   NetworkAclId: !Ref PublicNetworkACL
   RuleNumber: 100
   RuleAction: allow
   Protocol: 6
   Egress: false
   CidrBlock: 0.0.0.0/0
   PortRange:
    From: '80'
    To: '80'
 outBoundNetworkAClallowHTTP:
  Type: AWS::EC2::NetworkAclEntry
  Properties:
   NetworkAclId: !Ref PublicNetworkACL
   RuleNumber: '100'
   Protocol: '6'
   RuleAction: allow
   Egress: 'true'
   CidrBlock: 0.0.0.0/0
   PortRange:
    From: '80'
    To: '80'
 INBoundNetworkAClallowHTTPS:
  Type: AWS::EC2::NetworkAclEntry
  Properties:
   NetworkAclId: !Ref PublicNetworkACL
   RuleNumber: 200
   RuleAction: allow
   Protocol: 6
   Egress: false
   CidrBlock: 0.0.0.0/0
   PortRange:
    From: '443'
    To: '443'
 outBoundNetworkAClallowHTTPS:
  Type: AWS::EC2::NetworkAclEntry
  Properties:
   NetworkAclId: !Ref PublicNetworkACL
   RuleNumber: '200'
   Protocol: '6'
   RuleAction: allow
   Egress: 'true'
   CidrBlock: 0.0.0.0/0
   PortRange:
    From: '443'
    To: '443'
 INBoundNetworkAClallowSSH:
  Type: AWS::EC2::NetworkAclEntry
  Properties:
   NetworkAclId: !Ref PublicNetworkACL
   RuleNumber: 300
   RuleAction: allow
   Protocol: 6
   Egress: false
   CidrBlock: 172.240.189.202/32
   PortRange:
    From: '7222'
    To: '7222'
 outBoundNetworkAClallowSSH:
  Type: AWS::EC2::NetworkAclEntry
  Properties:
   NetworkAclId: !Ref PublicNetworkACL
   RuleNumber: '300'
   Protocol: '6'
   RuleAction: allow
   Egress: 'true'
   CidrBlock: 172.240.189.202/32
   PortRange:
    From: '7222'
    To: '7222'
 outBoundNetworkAClallowSSHP:
  Type: AWS::EC2::NetworkAclEntry
  Properties:
   NetworkAclId: !Ref PublicNetworkACL
   RuleNumber: '301'
   Protocol: '6'
   RuleAction: allow
   Egress: 'true'
   CidrBlock: 172.30.0.0/16
   PortRange:
    From: '22'
    To: '22'
 INBoundNetworkAClallowEMPorts:
  Type: AWS::EC2::NetworkAclEntry
  Properties:
   NetworkAclId: !Ref PublicNetworkACL
   RuleNumber: 400
   RuleAction: allow
   Protocol: 6
   Egress: false
   CidrBlock: 0.0.0.0/0
   PortRange:
    From: '1024'
    To: '65535'
 outBoundNetworkAClallowEMports:
  Type: AWS::EC2::NetworkAclEntry
  Properties:
   NetworkAclId: !Ref PublicNetworkACL
   RuleNumber: '400'
   Protocol: '6'
   RuleAction: allow
   Egress: 'true'
   CidrBlock: 0.0.0.0/0
   PortRange:
    From: '1024'
    To: '65535'
 PrivateNetworkACL:
  Type: AWS::EC2::NetworkAcl
  Properties:
   VpcId: !Ref PDQPickupVPC
   Tags:
    - Key: Name
      Value: HandyProNetworkACL
    - Key: Project
      Value: HandyPro
 INBoundNetworkAClallowHTTPPri:
  Type: AWS::EC2::NetworkAclEntry
  Properties:
   NetworkAclId: !Ref PrivateNetworkACL
   RuleNumber: 100
   RuleAction: allow
   Protocol: 6
   Egress: false
   CidrBlock: 0.0.0.0/0
   PortRange:
    From: '80'
    To: '80'
 outBoundNetworkAClallowHTTPPri:
  Type: AWS::EC2::NetworkAclEntry
  Properties:
   NetworkAclId: !Ref PrivateNetworkACL
   RuleNumber: '100'
   Protocol: '6'
   RuleAction: allow
   Egress: 'true'
   CidrBlock: 0.0.0.0/0
   PortRange:
    From: '80'
    To: '80'
 INBoundNetworkAClallowHTTPSPri:
  Type: AWS::EC2::NetworkAclEntry
  Properties:
   NetworkAclId: !Ref PrivateNetworkACL
   RuleNumber: 200
   RuleAction: allow
   Protocol: 6
   Egress: false
   CidrBlock: 0.0.0.0/0
   PortRange:
    From: '443'
    To: '443'
 outBoundNetworkAClallowHTTPSPri:
  Type: AWS::EC2::NetworkAclEntry
  Properties:
   NetworkAclId: !Ref PrivateNetworkACL
   RuleNumber: '200'
   Protocol: '6'
   RuleAction: allow
   Egress: 'true'
   CidrBlock: 0.0.0.0/0
   PortRange:
    From: '443'
    To: '443'
 INBoundNetworkAClallowSSHPri:
  Type: AWS::EC2::NetworkAclEntry
  Properties:
   NetworkAclId: !Ref PrivateNetworkACL
   RuleNumber: 300
   RuleAction: allow
   Protocol: 6
   Egress: false
   CidrBlock: 172.30.0.0/16
   PortRange:
    From: '22'
    To: '22'
 INBoundNetworkAClallowEMPortsPri:
  Type: AWS::EC2::NetworkAclEntry
  Properties:
   NetworkAclId: !Ref PrivateNetworkACL
   RuleNumber: 400
   RuleAction: allow
   Protocol: 6
   Egress: false
   CidrBlock: 0.0.0.0/0
   PortRange:
    From: '1024'
    To: '65535'
 outBoundNetworkAClallowEMportsPri:
  Type: AWS::EC2::NetworkAclEntry
  Properties:
   NetworkAclId: !Ref PrivateNetworkACL
   RuleNumber: '400'
   Protocol: '6'
   RuleAction: allow
   Egress: 'true'
   CidrBlock: 0.0.0.0/0
   PortRange:
    From: '1024'
    To: '65535'
 PublicSubnetNWACLAssociation1:
  Type: AWS::EC2::SubnetNetworkAclAssociation
  Properties:
   SubnetId: !Ref PublicSubnet1PDQ
   NetworkAclId: !Ref PublicNetworkACL
 PublicSubnetNWACLAssociation2:
  Type: AWS::EC2::SubnetNetworkAclAssociation
  Properties:
   SubnetId: !Ref PublicSubnet2PDQ
   NetworkAclId: !Ref PublicNetworkACL
 PrivateSubnetNWACLAssociation1:
  Type: AWS::EC2::SubnetNetworkAclAssociation
  Properties:
   SubnetId: !Ref PrivateSubnet1PDQ
   NetworkAclId: !Ref PrivateNetworkACL
 PrivateSubnetNWACLAssociation2:
  Type: AWS::EC2::SubnetNetworkAclAssociation
  Properties:
   SubnetId: !Ref PrivateSubnet2PDQ
   NetworkAclId: !Ref PrivateNetworkACL
#############################################################
#############################################################
############## Bastion Server/Instance ######################
 BastionInstance:
  Type: AWS::EC2::Instance
  Properties:
   InstanceType: t2.micro 
   KeyName: Training
   ImageId: ami-0f9cf087c1f27d9b1
   NetworkInterfaces:
    - AssociatePublicIpAddress: 'true'
      DeviceIndex: "0"
      GroupSet: 
       - Ref: "SecurityGroupone"
      SubnetId: !Ref PublicSubnet1PDQ
   BlockDeviceMappings:
    - DeviceName: /dev/sda1
      Ebs:
       VolumeType: "io1"
       Iops: "200"
       DeleteOnTermination: "false"
       VolumeSize: "10"
   Tags:
    - Key: Name
      Value: BastionServer	
############################################################
############################################################
################ MYSQL DB SERVER ###########################
 MySQLInstacne:
  Type: AWS::EC2::Instance
  Properties:
   InstanceType: t2.micro 
   KeyName: Training
   ImageId: ami-0f9cf087c1f27d9b1
   NetworkInterfaces:
    - AssociatePublicIpAddress: 'false'
      DeviceIndex: "0"
      GroupSet: 
       - Ref: "SecurityGroupfour"
      SubnetId: !Ref PrivateSubnet1PDQ
   BlockDeviceMappings:
    - DeviceName: /dev/sda1
      Ebs:
       VolumeType: "io1"
       Iops: "200"
       DeleteOnTermination: "false"
       VolumeSize: "20"
    - DeviceName: /dev/sdb
      Ebs:
       VolumeType: "io1"
       Iops: "200"
       DeleteOnTermination: "false"
       VolumeSize: "20"
   Tags:
    - Key: Name
      Value: Prod-c0-DBServer
##############################################################
##############################################################
 AppInstance:
  Type: AWS::EC2::Instance
  Properties:
   InstanceType: t2.micro 
   KeyName: Training
   ImageId: ami-0f9cf087c1f27d9b1
   NetworkInterfaces:
    - AssociatePublicIpAddress: 'false'
      DeviceIndex: "0"
      GroupSet: 
       - Ref: "SecurityGroupfour"
      SubnetId: !Ref PrivateSubnet1PDQ
   BlockDeviceMappings:
    - DeviceName: /dev/sda1
      Ebs:
       VolumeType: "io1"
       Iops: "200"
       DeleteOnTermination: "false"
       VolumeSize: "20"
    - DeviceName: /dev/sdb
      Ebs:
       VolumeType: "io1"
       Iops: "200"
       DeleteOnTermination: "false"
       VolumeSize: "20"
   Tags:
    - Key: Name
      Value: Prod-c0-AppServer



